from graph import *
import matplotlib.pyplot as plt
import networkx as nx
import torch
import copy

info_type = "wlasl_stddev"

random_skeleton_shape = torch.tensor([[125.0000,  80.0000],
        [125.0000, 130.0000],
        [ 85.0000, 130.0000],
        [ 75.0000, 205.0000],
        [ 65.0000, 280.0000],
        [165.0000, 130.0000],
        [175.0000, 205.0000],
        [185.0000, 280.0000],
        [125.0000, 245.0000],
        [100.0000, 245.0000],
        [100.0000, 300.0000],
        [100.0000, 400.0000],
        [150.0000, 245.0000],
        [150.0000, 300.0000],
        [150.0000, 400.0000],
        [115.,  65.],
        [135.,  65.],
        [105.,  80.],
        [145.,  80.],
        [ 160.0000,   425.0000],
        [ 165.0000,   420.0000],
        [145.0000,   405.0000],
        [90.0000,   425.0000],
        [  85.0000,   420.0000],
        [  105.0000,   405.0000],
        [ 50.0000, 300.0000],
        [ 65.0000, 310.0000],
        [ 67.5000, 320.0000],
        [ 68.5000, 330.0000],
        [ 69.0000, 340.0000],
        [ 60.0000, 320.0000],
        [ 61.0000, 335.0000],
        [ 62.0000, 350.0000],
        [ 62.5000, 365.0000],
        [ 55.0000, 320.0000],
        [ 55.0000, 335.0000],
        [ 55.0000, 350.0000],
        [ 55.0000, 365.0000],
        [ 48.0000, 320.0000],
        [ 48.0000, 335.0000],
        [ 48.0000, 350.0000],
        [ 48.0000, 365.0000],
        [ 42.0000, 320.0000],
        [ 41.5000, 330.0000],
        [ 41.0000, 340.0000],
        [ 40.5000, 350.0000],
        [200.0000, 300.0000],
        [185.0000, 310.0000],
        [182.5000, 320.0000],
        [181.5000, 330.0000],
        [181.0000, 340.0000],
        [190.0000, 320.0000],
        [189.0000, 335.0000],
        [188.0000, 350.0000],
        [187.5000, 365.0000],
        [195.0000, 320.0000],
        [195.0000, 335.0000],
        [195.0000, 350.0000],
        [195.0000, 365.0000],
        [202.0000, 320.0000],
        [202.0000, 335.0000],
        [202.0000, 350.0000],
        [202.0000, 365.0000],
        [208.0000, 320.0000],
        [208.5000, 330.0000],
        [209.0000, 340.0000],
        [209.5000, 350.0000]])
mean_wlasl_shape = torch.tensor([[ 1.5260e-01, -1.8468e-01],
        [ 1.6387e-01,  1.6032e-02],
        [-4.2083e-02,  1.7060e-02],
        [-1.4832e-01,  2.5746e-01],
        [-1.0935e-01,  7.3070e-02],
        [ 3.7089e-01,  1.6212e-02],
        [ 4.3940e-01,  2.7704e-01],
        [ 7.7451e-02,  3.8962e-02],
        [-1.2321e-01,  3.4537e-02],
        [-1.9905e-01,  2.6120e-02],
        [-4.9979e-01, -4.9965e-01],
        [-5.0000e-01, -5.0000e-01],
        [-5.6352e-02,  2.4412e-02],
        [-4.9951e-01, -4.9950e-01],
        [-5.0000e-01, -5.0000e-01],
        [ 1.0909e-01, -2.1649e-01],
        [ 1.9578e-01, -2.1746e-01],
        [ 4.4567e-02, -1.8956e-01],
        [ 2.5350e-01, -1.8800e-01],
        [-5.0000e-01, -5.0000e-01],
        [-5.0000e-01, -5.0000e-01],
        [-5.0000e-01, -5.0000e-01],
        [-5.0000e-01, -5.0000e-01],
        [-5.0000e-01, -5.0000e-01],
        [-5.0000e-01, -5.0000e-01],
        [-1.7714e-01,  3.3461e-02],
        [-9.4185e-02,  3.4198e-02],
        [ 5.4242e-03, -3.3863e-02],
        [ 8.0202e-02, -5.9841e-02],
        [ 1.2105e-01, -7.0401e-02],
        [-1.3850e-02, -5.7896e-02],
        [ 5.1545e-02, -7.9991e-02],
        [ 8.4208e-02, -7.4680e-02],
        [ 8.0969e-02, -6.6479e-02],
        [-3.4276e-02, -1.5142e-02],
        [ 4.0535e-02, -6.4028e-03],
        [ 6.3499e-02,  2.6615e-02],
        [ 5.4009e-02,  2.4426e-02],
        [-5.2003e-02,  3.4958e-02],
        [ 1.9220e-02,  5.1893e-02],
        [ 3.0560e-02,  9.2587e-02],
        [ 3.2552e-02,  1.1056e-01],
        [-9.0949e-02,  7.9526e-02],
        [-3.2273e-03,  8.8073e-02],
        [-2.5742e-03,  1.3121e-01],
        [ 2.4088e-04,  1.5067e-01],
        [ 1.0790e-01, -7.8888e-02],
        [ 3.6644e-02, -9.3654e-03],
        [-1.9567e-02, -3.9044e-02],
        [-6.4429e-02, -3.7521e-02],
        [-8.6172e-02, -3.5985e-02],
        [-6.8479e-03, -1.0809e-02],
        [-2.1636e-02, -2.0068e-02],
        [-2.6853e-02, -8.8281e-03],
        [ 8.6349e-03, -1.0741e-03],
        [ 1.0221e-02,  1.0575e-02],
        [-1.8406e-02,  3.2756e-02],
        [-2.0168e-02,  6.4108e-02],
        [ 1.2974e-02,  6.1172e-02],
        [ 2.6949e-02,  3.2377e-02],
        [-8.0736e-03,  6.3412e-02],
        [ 3.1429e-03,  1.1514e-01],
        [ 1.0081e-02,  1.4231e-01],
        [ 8.2747e-02,  5.4460e-02],
        [ 3.0234e-04,  7.2881e-02],
        [ 1.6490e-02,  1.2718e-01],
        [ 2.0729e-02,  1.5182e-01]])

mean_niasl_54_shape = torch.tensor([[ 2.1316e-02, -4.4032e-01],
        [ 2.7126e-02, -2.1716e-01],
        [-2.5533e-01, -2.1849e-01],
        [-3.7697e-01,  1.7371e-02],
        [-2.8664e-01,  8.4709e-02],
        [ 3.1357e-01, -2.1706e-01],
        [ 4.1701e-01,  3.7845e-02],
        [ 3.5497e-01,  1.9240e-01],
        [-4.0207e-02, -4.7032e-01],
        [ 8.2200e-02, -4.7228e-01],
        [-1.2127e-01, -4.2947e-01],
        [ 1.6678e-01, -4.3538e-01],
        [-1.9031e-01, -1.1714e-01],
        [-8.1136e-02, -1.2539e-01],
        [ 3.5544e-02, -9.4771e-02],
        [ 1.0895e-01, -3.2650e-02],
        [ 1.5465e-01,  2.1472e-02],
        [-4.9156e-02, -5.3328e-02],
        [ 5.7251e-02,  3.0272e-02],
        [ 1.2430e-01,  8.9665e-02],
        [ 1.7032e-01,  1.3382e-01],
        [-9.7807e-02, -1.3356e-02],
        [ 2.2760e-02,  8.5079e-02],
        [ 8.5484e-02,  1.5323e-01],
        [ 1.2362e-01,  1.9701e-01],
        [-1.2803e-01,  1.8946e-02],
        [-1.7257e-02,  1.0822e-01],
        [ 4.1349e-02,  1.6951e-01],
        [ 7.1833e-02,  2.1235e-01],
        [-1.4138e-01,  4.7230e-02],
        [-5.5369e-02,  1.2270e-01],
        [-1.1128e-02,  1.6070e-01],
        [ 1.1569e-02,  1.8767e-01],
        [ 1.5817e-01, -2.5542e-01],
        [ 4.3576e-02, -2.2407e-01],
        [-6.3565e-02, -1.3520e-01],
        [-1.2198e-01, -2.4359e-02],
        [-1.6102e-01,  6.1745e-02],
        [ 4.6651e-02, -2.1783e-02],
        [-4.0645e-02,  1.1787e-01],
        [-1.0359e-01,  1.9510e-01],
        [-1.4826e-01,  2.4772e-01],
        [ 1.0547e-01,  1.1742e-02],
        [ 4.9126e-03,  1.6055e-01],
        [-6.3446e-02,  2.4051e-01],
        [-1.1319e-01,  2.9394e-01],
        [ 1.4207e-01,  2.4547e-02],
        [ 4.9608e-02,  1.5028e-01],
        [-1.9982e-02,  2.2634e-01],
        [-6.4354e-02,  2.8332e-01],
        [ 1.5757e-01,  2.8822e-02],
        [ 8.2637e-02,  1.3483e-01],
        [ 3.1209e-02,  1.8465e-01],
        [ 2.1836e-04,  2.2213e-01]])


wlasl_stddev = torch.tensor([[0.0498, 0.0480],
        [0.0500, 0.0546],
        [0.0520, 0.0553],
        [0.0689, 0.0929],
        [0.1804, 0.2775],
        [0.0581, 0.0554],
        [0.0803, 0.0919],
        [0.3829, 0.3699],
        [0.3096, 0.4439],
        [0.2522, 0.4437],
        [0.0374, 0.0277],
        [0.0360, 0.0220],
        [0.3707, 0.4434],
        [0.0412, 0.0304],
        [0.0360, 0.0220],
        [0.0516, 0.0472],
        [0.0509, 0.0462],
        [0.0832, 0.0608],
        [0.0638, 0.0491],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.2403, 0.3202],
        [0.2101, 0.2272],
        [0.1993, 0.1793],
        [0.2040, 0.1834],
        [0.2479, 0.2368],
        [0.1710, 0.1693],
        [0.1819, 0.1904],
        [0.2001, 0.2188],
        [0.2553, 0.2581],
        [0.1491, 0.1596],
        [0.1676, 0.1716],
        [0.1845, 0.2067],
        [0.2306, 0.2446],
        [0.1659, 0.1610],
        [0.1793, 0.1658],
        [0.1925, 0.1964],
        [0.2195, 0.2351],
        [0.2168, 0.1862],
        [0.2321, 0.1921],
        [0.2255, 0.1991],
        [0.2397, 0.2175],
        [0.2363, 0.2776],
        [0.2056, 0.1973],
        [0.1875, 0.1599],
        [0.2033, 0.1705],
        [0.2471, 0.2220],
        [0.1623, 0.1499],
        [0.1758, 0.1774],
        [0.1905, 0.2007],
        [0.2507, 0.2288],
        [0.1449, 0.1464],
        [0.1630, 0.1600],
        [0.1757, 0.1856],
        [0.2313, 0.2206],
        [0.1622, 0.1578],
        [0.1734, 0.1609],
        [0.1837, 0.1841],
        [0.2148, 0.2159],
        [0.2127, 0.1845],
        [0.2297, 0.1901],
        [0.2165, 0.1935],
        [0.2342, 0.2075]])


niasl_54_stddev = torch.tensor([[0.0544, 0.0413],
        [0.0525, 0.0323],
        [0.0728, 0.0332],
        [0.0895, 0.0600],
        [0.1218, 0.2409],
        [0.0626, 0.0326],
        [0.0659, 0.0427],
        [0.1079, 0.1858],
        [0.0561, 0.0422],
        [0.0540, 0.0421],
        [0.0613, 0.0404],
        [0.0555, 0.0402],
        [0.1489, 0.3573],
        [0.1563, 0.2572],
        [0.1601, 0.1406],
        [0.1483, 0.1441],
        [0.1689, 0.2160],
        [0.1014, 0.1140],
        [0.1101, 0.2132],
        [0.1173, 0.2665],
        [0.1348, 0.3082],
        [0.0880, 0.1014],
        [0.1172, 0.1850],
        [0.1172, 0.2250],
        [0.1294, 0.2645],
        [0.1121, 0.1022],
        [0.1428, 0.1374],
        [0.1343, 0.1682],
        [0.1412, 0.2065],
        [0.1501, 0.1318],
        [0.1671, 0.1196],
        [0.1629, 0.1339],
        [0.1669, 0.1574],
        [0.1293, 0.2917],
        [0.1321, 0.2023],
        [0.1290, 0.1081],
        [0.1223, 0.1235],
        [0.1443, 0.1889],
        [0.0775, 0.0875],
        [0.0822, 0.1706],
        [0.0902, 0.2169],
        [0.1067, 0.2516],
        [0.0722, 0.0715],
        [0.0970, 0.1376],
        [0.1017, 0.1762],
        [0.1151, 0.2132],
        [0.0900, 0.0799],
        [0.1170, 0.0985],
        [0.1158, 0.1271],
        [0.1260, 0.1629],
        [0.1157, 0.1170],
        [0.1315, 0.0935],
        [0.1308, 0.1000],
        [0.1359, 0.1182]])
if info_type == "niasl_stddev":
    weight = niasl_stddev
if info_type == "niasl_54_stddev":
    weight = niasl_54_stddev    
    mean_skeleton_shape = mean_niasl_54_shape
if info_type == "wlasl_stddev":
    weight = wlasl_stddev
    mean_skeleton_shape = mean_wlasl_shape

if '54' in info_type:
    temp = torch.zeros(67, 2)
    temp2 = torch.zeros(67, 2)
    broadcast_54_67 = torch.cat((torch.tensor((0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18)), torch.arange(25, 67)))
    temp[broadcast_54_67, :] = weight
    temp2[broadcast_54_67, :] = mean_skeleton_shape
    weight = temp
    mean_skeleton_shape = temp2

weight_list = []    
for i in range(weight.shape[0]):
    weight_list.append(weight[i,:].sum()*75)


G = nx.Graph()

# Add nodes to the graph
for i in range(25):
    G.add_node(i)
    
for (i, j) in POSE_MAP:
    G.add_edge(i, j)

for (i, j) in HAND_MAP:
    G.add_edge(i+25, j+25)

for (i, j) in HAND_MAP:
    G.add_edge(i+46, j+46)

for i in range(weight.shape[0]):
    G.nodes[i]['label'] = round(float(weight[i,:].sum()), 3)
print(weight_list)

positions = {}
mean_positions = {}
for i in range(67):
    positions[i] = tuple(random_skeleton_shape[i])

for i in range(67):
    mean_positions[i] = tuple(mean_skeleton_shape[i])

# Draw the graph



labels = {node: G.nodes[node]['label'] for node in G.nodes()}

mean_G = copy.deepcopy(G)

fig, ax = plt.subplots(ncols=2)

nx.draw(G, ax = ax[0], pos = positions, with_labels=False, node_size = weight_list)

nx.draw(mean_G, ax = ax[1], pos = mean_positions, with_labels=False, node_size = weight_list)

#nx.draw_networkx_labels(G, pos=positions, ax = ax[0],  font_weight='bold', font_size=0)

nx.draw_networkx_labels(mean_G, pos=mean_positions, ax = ax[1], font_weight='bold', font_size=6)

ax[0].invert_yaxis()
ax[1].invert_yaxis()
#plt.gca().set_aspect('equal', adjustable='box')
# Show the plot
plt.show()
plt.savefig('/home/ajkim/kslt/slr/render_'+info_type+'.png')