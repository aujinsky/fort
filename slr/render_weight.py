from graph import *
import matplotlib.pyplot as plt
import networkx as nx
import torch

random_skeleton_shape = torch.tensor([[125.0000,  80.0000],
        [125.0000, 130.0000],
        [ 85.0000, 130.0000],
        [ 75.0000, 205.0000],
        [ 65.0000, 280.0000],
        [165.0000, 130.0000],
        [175.0000, 205.0000],
        [185.0000, 280.0000],
        [125.0000, 245.0000],
        [100.0000, 245.0000],
        [100.0000, 300.0000],
        [100.0000, 400.0000],
        [150.0000, 245.0000],
        [150.0000, 300.0000],
        [150.0000, 400.0000],
        [115.,  65.],
        [135.,  65.],
        [105.,  80.],
        [145.,  80.],
        [ 160.0000,   425.0000],
        [ 165.0000,   420.0000],
        [145.0000,   405.0000],
        [90.0000,   425.0000],
        [  85.0000,   420.0000],
        [  105.0000,   405.0000],
        [ 50.0000, 300.0000],
        [ 65.0000, 310.0000],
        [ 67.5000, 320.0000],
        [ 68.5000, 330.0000],
        [ 69.0000, 340.0000],
        [ 60.0000, 320.0000],
        [ 61.0000, 335.0000],
        [ 62.0000, 350.0000],
        [ 62.5000, 365.0000],
        [ 55.0000, 320.0000],
        [ 55.0000, 335.0000],
        [ 55.0000, 350.0000],
        [ 55.0000, 365.0000],
        [ 48.0000, 320.0000],
        [ 48.0000, 335.0000],
        [ 48.0000, 350.0000],
        [ 48.0000, 365.0000],
        [ 42.0000, 320.0000],
        [ 41.5000, 330.0000],
        [ 41.0000, 340.0000],
        [ 40.5000, 350.0000],
        [200.0000, 300.0000],
        [185.0000, 310.0000],
        [182.5000, 320.0000],
        [181.5000, 330.0000],
        [181.0000, 340.0000],
        [190.0000, 320.0000],
        [189.0000, 335.0000],
        [188.0000, 350.0000],
        [187.5000, 365.0000],
        [195.0000, 320.0000],
        [195.0000, 335.0000],
        [195.0000, 350.0000],
        [195.0000, 365.0000],
        [202.0000, 320.0000],
        [202.0000, 335.0000],
        [202.0000, 350.0000],
        [202.0000, 365.0000],
        [208.0000, 320.0000],
        [208.5000, 330.0000],
        [209.0000, 340.0000],
        [209.5000, 350.0000]])


stddev = torch.tensor([[0.0498, 0.0480],
        [0.0500, 0.0546],
        [0.0520, 0.0553],
        [0.0689, 0.0929],
        [0.1804, 0.2775],
        [0.0581, 0.0554],
        [0.0803, 0.0919],
        [0.3829, 0.3699],
        [0.3096, 0.4439],
        [0.2522, 0.4437],
        [0.0374, 0.0277],
        [0.0360, 0.0220],
        [0.3707, 0.4434],
        [0.0412, 0.0304],
        [0.0360, 0.0220],
        [0.0516, 0.0472],
        [0.0509, 0.0462],
        [0.0832, 0.0608],
        [0.0638, 0.0491],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.0360, 0.0220],
        [0.2403, 0.3202],
        [0.2101, 0.2272],
        [0.1993, 0.1793],
        [0.2040, 0.1834],
        [0.2479, 0.2368],
        [0.1710, 0.1693],
        [0.1819, 0.1904],
        [0.2001, 0.2188],
        [0.2553, 0.2581],
        [0.1491, 0.1596],
        [0.1676, 0.1716],
        [0.1845, 0.2067],
        [0.2306, 0.2446],
        [0.1659, 0.1610],
        [0.1793, 0.1658],
        [0.1925, 0.1964],
        [0.2195, 0.2351],
        [0.2168, 0.1862],
        [0.2321, 0.1921],
        [0.2255, 0.1991],
        [0.2397, 0.2175],
        [0.2363, 0.2776],
        [0.2056, 0.1973],
        [0.1875, 0.1599],
        [0.2033, 0.1705],
        [0.2471, 0.2220],
        [0.1623, 0.1499],
        [0.1758, 0.1774],
        [0.1905, 0.2007],
        [0.2507, 0.2288],
        [0.1449, 0.1464],
        [0.1630, 0.1600],
        [0.1757, 0.1856],
        [0.2313, 0.2206],
        [0.1622, 0.1578],
        [0.1734, 0.1609],
        [0.1837, 0.1841],
        [0.2148, 0.2159],
        [0.2127, 0.1845],
        [0.2297, 0.1901],
        [0.2165, 0.1935],
        [0.2342, 0.2075]])

weight = torch.tensor([[[[0.9558, 1.0015],
          [0.9980, 1.0250],
          [1.0991, 1.0136],
          [1.0343, 1.0130],
          [1.1930, 1.1658],
          [0.9688, 1.0621],
          [0.9600, 0.9580],
          [0.9627, 0.9547],
          [0.8999, 0.8858],
          [0.9070, 0.9107],
          [0.9501, 0.9355],
          [0.9407, 0.9266],
          [0.9213, 0.9200],
          [0.9579, 0.9558],
          [0.9340, 0.9531],
          [0.9968, 0.9902],
          [0.9729, 0.9876],
          [1.0593, 0.9919],
          [0.9709, 0.9640],
          [0.9448, 0.9398],
          [0.9475, 0.9426],
          [0.9556, 0.9531],
          [0.9363, 0.9522],
          [0.9267, 0.9502],
          [0.9500, 0.9303],
          [1.0311, 1.0155],
          [1.0303, 1.0353],
          [1.0491, 1.0940],
          [1.0418, 1.0642],
          [1.0799, 1.0975],
          [1.0722, 1.0768],
          [1.0754, 1.0085],
          [1.0460, 1.0227],
          [1.0365, 1.0181],
          [1.0855, 1.1026],
          [1.0581, 1.0338],
          [0.9868, 1.0481],
          [1.0567, 1.0356],
          [1.0345, 1.0738],
          [1.0472, 1.0652],
          [0.9900, 0.9976],
          [1.0411, 1.0475],
          [1.0336, 1.0549],
          [1.0429, 1.0665],
          [1.0267, 1.0431],
          [1.0235, 1.0552],
          [1.0264, 1.0175],
          [1.0385, 1.0301],
          [1.0028, 1.0690],
          [1.0063, 1.0074],
          [1.0177, 1.0356],
          [1.0453, 1.0453],
          [1.0365, 1.0106],
          [1.0216, 0.9813],
          [1.0101, 1.0169],
          [1.0195, 1.0444],
          [1.0180, 1.0094],
          [0.9867, 1.0081],
          [0.9853, 0.9934],
          [1.0106, 1.0059],
          [0.9919, 1.0002],
          [0.9835, 0.9666],
          [1.0193, 0.9792],
          [0.9883, 1.0326],
          [0.9838, 1.0432],
          [0.9939, 0.9901],
          [0.9950, 1.0100]]]]).squeeze()
weight = stddev

weight_list = []    
for i in range(weight.shape[0]):
    weight_list.append(weight[i,:].sum()*25)




G = nx.Graph()

# Add nodes to the graph
for i in range(25):
    G.add_node(i)
    
for (i, j) in POSE_MAP:
    G.add_edge(i, j)

for (i, j) in HAND_MAP:
    G.add_edge(i+25, j+25)

for (i, j) in HAND_MAP:
    G.add_edge(i+46, j+46)

for i in range(weight.shape[0]):
    print(G.nodes)
    G.nodes[i]['label'] = round(float(weight[i,:].sum()), 3)
print(weight_list)

positions = {}
for i in range(67):
    positions[i] = tuple(random_skeleton_shape[i])

# Draw the graph

labels = {node: G.nodes[node]['label'] for node in G.nodes()}

nx.draw(G, pos = positions, with_labels=False, node_size = weight_list)

nx.draw_networkx_labels(G, pos=positions, labels=labels, font_weight='bold', font_size=6)

plt.gca().invert_yaxis()
#plt.gca().set_aspect('equal', adjustable='box')
# Show the plot
plt.show()
plt.savefig('render_stddev.png')