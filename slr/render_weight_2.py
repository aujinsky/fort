from graph import *
import matplotlib.pyplot as plt
import networkx as nx
import torch

weight_from = "wlasl"

random_skeleton_shape = torch.tensor([[125.0000,  80.0000],
        [125.0000, 130.0000],
        [ 85.0000, 130.0000],
        [ 75.0000, 205.0000],
        [ 65.0000, 280.0000],
        [165.0000, 130.0000],
        [175.0000, 205.0000],
        [185.0000, 280.0000],
        [125.0000, 245.0000],
        [100.0000, 245.0000],
        [100.0000, 300.0000],
        [100.0000, 400.0000],
        [150.0000, 245.0000],
        [150.0000, 300.0000],
        [150.0000, 400.0000],
        [115.,  65.],
        [135.,  65.],
        [105.,  80.],
        [145.,  80.],
        [ 160.0000,   425.0000],
        [ 170.0000,   415.0000],
        [140.0000,   410.0000],
        [90.0000,   425.0000],
        [  80.0000,   415.0000],
        [  110.0000,   410.0000],
        [ 50.0000, 300.0000],
        [ 80.0000, 315.0000],
        [ 82.5000, 330.0000],
        [ 83.5000, 345.0000],
        [ 84.0000, 360.0000],
        [ 67.0000, 330.0000],
        [ 68.0000, 345.0000],
        [ 70.0000, 360.0000],
        [ 70.5000, 375.0000],
        [ 55.0000, 325.0000],
        [ 55.0000, 345.0000],
        [ 55.0000, 365.0000],
        [ 55.0000, 385.0000],
        [ 40.0000, 325.0000],
        [ 40.0000, 345.0000],
        [ 40.0000, 365.0000],
        [ 40.0000, 385.0000],
        [ 27.0000, 325.0000],
        [ 26.5000, 340.0000],
        [ 26.0000, 355.0000],
        [ 25.5000, 370.0000],
        [ 200.0000, 300.0000],
        [ 170.0000, 315.0000],
        [ 167.5000, 330.0000],
        [ 166.5000, 345.0000],
        [ 166.0000, 360.0000],
        [ 183.0000, 330.0000],
        [ 182.0000, 345.0000],
        [ 180.0000, 360.0000],
        [ 179.5000, 375.0000],
        [ 195.0000, 325.0000],
        [ 195.0000, 345.0000],
        [ 195.0000, 365.0000],
        [ 195.0000, 385.0000],
        [ 210.0000, 325.0000],
        [ 210.0000, 345.0000],
        [ 210.0000, 365.0000],
        [ 210.0000, 385.0000],
        [ 223.0000, 325.0000],
        [ 223.5000, 340.0000],
        [ 224.0000, 355.0000],
        [ 224.5000, 370.0000]])


weight1 = torch.tensor([[[[0.9725],
          [0.9974],
          [1.0792],
          [1.0332],
          [1.2375],
          [0.9784],
          [0.9443],
          [0.9371],
          [0.8474],
          [0.8924],
          [0.9216],
          [0.8915],
          [0.8683],
          [0.9484],
          [0.9306],
          [0.9879],
          [0.9756],
          [1.0248],
          [0.9533],
          [0.9193],
          [0.9046],
          [0.9398],
          [0.9196],
          [0.9114],
          [0.9189],
          [1.0403],
          [1.0456],
          [1.1008],
          [1.0677],
          [1.1084],
          [1.0980],
          [1.0558],
          [1.0564],
          [1.0475],
          [1.1204],
          [1.0704],
          [1.0227],
          [1.0600],
          [1.0700],
          [1.0682],
          [0.9797],
          [1.0546],
          [1.0551],
          [1.0739],
          [1.0422],
          [1.0416],
          [1.0167],
          [1.0454],
          [1.0461],
          [1.0065],
          [1.0284],
          [1.0671],
          [1.0336],
          [0.9914],
          [1.0081],
          [1.0284],
          [1.0117],
          [0.9837],
          [0.9799],
          [1.0019],
          [0.9845],
          [0.9625],
          [0.9966],
          [1.0140],
          [1.0212],
          [0.9824],
          [0.9994]]]]).squeeze().round(decimals=2)

weight2 = torch.tensor([[[[0.9806],
          [0.9854],
          [1.0745],
          [1.0032],
          [1.1874],
          [0.9708],
          [0.9382],
          [0.9198],
          [0.9776],
          [0.9580],
          [0.9913],
          [0.9701],
          [1.0068],
          [1.0157],
          [1.0464],
          [1.0321],
          [1.0536],
          [1.0651],
          [1.0069],
          [0.9993],
          [1.0129],
          [1.0523],
          [1.0273],
          [0.9932],
          [1.0013],
          [1.0141],
          [1.0325],
          [0.9484],
          [1.0282],
          [1.0215],
          [1.0214],
          [1.0061],
          [1.0158],
          [0.9829],
          [0.9930],
          [1.0082],
          [1.0067],
          [0.9903],
          [1.0035],
          [0.9918],
          [0.9630],
          [0.9644],
          [1.0265],
          [0.9676],
          [0.9611],
          [0.9612],
          [1.0045],
          [0.9906],
          [0.9479],
          [0.9551],
          [0.9722],
          [0.9639],
          [0.9632],
          [0.9703]]]]).squeeze().round(decimals=2)


niasl_weight = torch.tensor([[[[0.9706],
          [0.9613],
          [0.9521],
          [0.9568],
          [0.9632],
          [0.9816],
          [0.9638],
          [0.9991],
          [0.9763],
          [0.9711],
          [0.9819],
          [1.0306],
          [1.0328],
          [1.0372],
          [1.0184],
          [1.0489],
          [1.1373],
          [1.0295],
          [1.0167],
          [1.0533],
          [1.1199],
          [1.0120],
          [0.9965],
          [1.0338],
          [1.1286],
          [1.0422],
          [1.0084],
          [1.0199],
          [1.1129],
          [1.0183],
          [1.0165],
          [1.0364],
          [1.1018],
          [0.9807],
          [0.9522],
          [0.9576],
          [0.9629],
          [1.0262],
          [0.9605],
          [0.9655],
          [0.9584],
          [0.9925],
          [0.9516],
          [0.9547],
          [0.9475],
          [0.9988],
          [0.9606],
          [0.9244],
          [0.9443],
          [1.0024],
          [0.9404],
          [0.9511],
          [0.9482],
          [0.9896]]]]).squeeze()

weight = torch.zeros(67)

broadcast_54_67 = torch.cat((torch.tensor((0, 1, 2, 3, 4, 5, 6, 7, 15, 16, 17, 18)), torch.arange(25, 67)))
if weight_from == "niasl":
    weight[broadcast_54_67] = niasl_weight 
if weight_from == "wlasl":
    weight = weight1
    #weight[broadcast_54_67] = weight2 
weight_list = []    
for i in range(weight.shape[0]):
    weight_list.append(weight[i]*25)




G = nx.Graph()

# Add nodes to the graph
for i in range(25):
    G.add_node(i)
    
for (i, j) in POSE_MAP:
    G.add_edge(i, j)

for (i, j) in HAND_MAP:
    G.add_edge(i+25, j+25)

for (i, j) in HAND_MAP:
    G.add_edge(i+46, j+46)

for i in range(weight.shape[0]):
    print(G.nodes)
    G.nodes[i]['label'] = round(float(weight[i]), 3)
print(weight_list)

positions = {}
for i in range(67):
    positions[i] = tuple(random_skeleton_shape[i])

# Draw the graph

labels = {node: G.nodes[node]['label'] for node in G.nodes()}

nx.draw(G, pos = positions, with_labels=False, node_size = weight_list)

nx.draw_networkx_labels(G, pos=positions, labels=labels, font_weight='bold', font_size=11.5)

plt.gca().invert_yaxis()
#plt.gca().set_aspect('equal', adjustable='box')
# Show the plot
plt.show()
plt.savefig('slr/render_'+weight_from+'_weight_54.png')